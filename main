$component.mount = function(componentString, name) {

  if ($component[name].$container) {

    $component[name].$container.innerHTML = componentString;
  } else {
    return componentString
  }
}
$component.binding = function(string) {
  return string.match(/\{\w+\}/g)
}
$component.compile = function(name) {

  var componentArray = $component[name].$data;
  var bindingsArray = $component.binding($component[name].$template);
  var componentString = "";
  for (var componentCounter in componentArray) {
    var workingComponent = componentArray[componentCounter];
    var currentComponentTemplate = $component[name].$template;


    for (var bindingCounter in bindingsArray) {

      var workingBinding = bindingsArray[bindingCounter];
      var workingProperty = workingBinding.slice(1, -1);

      if (workingProperty[0] == "_") {
        workingProperty = workingProperty.slice(1);
      }
      var replacement = workingComponent[workingProperty];
      if (typeof workingComponent[workingProperty] == "undefined") {
        replacement = "";
      }
      if (typeof workingComponent[workingProperty] == "function") {
        replacement = workingComponent[workingProperty]();
        if (typeof replacement == "undefined") replacement = '';
      }

      currentComponentTemplate = currentComponentTemplate.replace(workingBinding, replacement);

    }
    componentString += currentComponentTemplate;

  }
  $component.mount(componentString, name);
}
$component.hashComponent = function (name, str, data, el) {

  $component[name] = {};
  $component[name].$template = str;
  $component[name].$data = data.slice();
  $component[name].$container = el;
  $component[name].$previousContainersContent = $component[name].$container.innerHTML;
  $component.$restoreContainer = function(name) {
  $component[name].$container.innerHTML = $component[name].$previousContainersContent
  };
}
function $component(name, str, data, el) {
  $component.hashComponent (name, str, data, el);
  $component.compile(name);
}
